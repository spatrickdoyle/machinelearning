#####Specification ordered by descending importance#####
base_lr: 0.01 # initial learning rate
momentum: 0.9 # constant momentum

test_interval: 10 # test model on validation data every 10 training iterations
display: 5 # display training performance every 5 iterations
max_iter: 3000 # maximum number of iterations
snapshot: 10 # save the model every 10 iterations
snapshot_prefix: "../Snapshots/3LayerSigmoid/snapshot" # where to save the model

weight_decay: 0.0005 # L2 regularization
lr_policy: "inv" # learning rate decay schedule
gamma: 0.0001
power: 0.6

random_seed: 1201 # the random seed
solver_mode: CPU # using CPU (there is a GPU option)
test_iter: 1 # How many iterations in each validation test
# This basically equals (# validation examples)/(validation batch size) 
test_state: { stage: "test-on-valid-set" } #test specification
net_param {
  name: "2LayerSigmoid"
  layers {
    name: "data_train"
    type: IMAGE_DATA
    top: "data"
    top: "label"
    image_data_param {
      source: "../train.caffe"
      batch_size: 680
      shuffle: true
    }
    transform_param {
      scale: 0.00392156
    }
    include: { phase: TRAIN }
  }
  layers {
    name: "data_valid"
    type: IMAGE_DATA
    top: "data"
    top: "label"
    image_data_param {
      source: "../valid.caffe"
      batch_size: 863
    }
    transform_param {
      scale: 0.00392156
    }
    include: {
      phase: TEST
      stage: "test-on-valid-set"
    }
  }
  layers {
    name: "fc1"
    type: INNER_PRODUCT
    bottom: "data"
    top: "fc1"
    blobs_lr: 1
    blobs_lr: 2
    inner_product_param {
      num_output: 200
      weight_filler {
        type: "xavier"
      }
      bias_filler {
        type: "constant"
      }
    }
  }
  layers {
    name: "fc1_sigmoid"
    type: SIGMOID
    bottom: "fc1"
    top: "fc1"
  }
  layers {
    name: "fc2"
    type: INNER_PRODUCT
    bottom: "fc1"
    top: "fc2"
    blobs_lr: 1
    blobs_lr: 2
    inner_product_param {
      num_output: 100
      weight_filler {
        type: "xavier"
      }
      bias_filler {
        type: "constant"
      }
    }
  }
  layers {
    name: "fc2_sigmoid"
    type: SIGMOID
    bottom: "fc2"
    top: "fc2"
  }
  layers {
    name: "fc3"
    type: INNER_PRODUCT
    bottom: "fc2"
    top: "fc3"
    blobs_lr: 1
    blobs_lr: 2
    inner_product_param {
      num_output: 50
      weight_filler {
        type: "xavier"
      }
      bias_filler {
        type: "constant"
      }
    }
  }
  layers {
    name: "fc3_sigmoid"
    type: SIGMOID
    bottom: "fc3"
    top: "fc3"
  }
  layers {
    name: "fc_final"
    type: INNER_PRODUCT
    bottom: "fc3"
    top: "fc_final"
    blobs_lr: 1
    blobs_lr: 2
    inner_product_param {
      num_output: 3
      weight_filler {
        type: "xavier"
      }
      bias_filler {
        type: "constant"
      }
    }
  }
  layers {
    name: "accuracy"
    type: ACCURACY
    bottom: "fc_final"
    bottom: "label"
    top: "accuracy"
  }
  layers {
    name: "loss"
    type: SOFTMAX_LOSS
    bottom: "fc_final"
    bottom: "label"
    top: "loss"
  }
}
